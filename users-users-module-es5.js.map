{"version":3,"sources":["webpack:///src/app/users/add-edit.component.ts","webpack:///src/app/users/add-edit.component.html","webpack:///src/app/users/layout.component.ts","webpack:///src/app/users/layout.component.html","webpack:///src/app/users/list.component.ts","webpack:///src/app/users/list.component.html","webpack:///src/app/users/users-routing.module.ts","webpack:///src/app/users/users.module.ts","webpack:///src/app/users/vacation-type-icon.component.ts","webpack:///src/app/users/vacation-type-icon.component.html","webpack:///src/app/users/vaclist.component.ts","webpack:///src/app/users/vaclist.component.html"],"names":["AddEditComponent","formBuilder","route","router","vacationService","accountService","alertService","loading","submitted","VacationType","id","snapshot","params","isAddMode","form","group","title","required","description","type","getAll","pipe","subscribe","vacations","vacJson","find","vacation","JSON","parse","toString","vac","f","setValue","console","log","clear","invalid","createUpdateVacation","newVac","value","userValue","uuidv4","data","success","keepAfterRouteChange","navigate","relativeTo","error","replace","c","r","Math","random","v","controls","onSubmit","selector","templateUrl","styleUrls","LayoutComponent","$event","stopPropagation","selection","ListComponent","users","displayedColumns","forEach","user","userString","push","dataSource","filterPredicate","filter","username","toLowerCase","includes","numSelected","selected","length","numRows","isAllSelected","row","select","isSelected","event","filterValue","target","trim","routes","path","component","children","UsersRoutingModule","forChild","imports","exports","UsersModule","declarations","VacationTypeIconComponent","VacationUtil","styles","VaclistComponent","vacationString"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCC;;AAAsB;;AAAY;;;;;;AACnC;;AAAuB;;AAAa;;;;;;AAaxB;;AAAqC;;AAAiB;;;;;;AAD1D;;AACI;;AACJ;;;;;;AADS;;AAAA;;;;;;AAiBH;;AAAoC;;AAAgB;;;;;;AADxD;;AACI;;AACJ;;;;;;AADS;;AAAA;;;;;;AAcP;;AAAuB;;AAAI;;;;;;AAC3B;;;;QD/BCA,gB;AAQT,gCACWC,WADX,EAEYC,KAFZ,EAGYC,MAHZ,EAIYC,eAJZ,EAKYC,cALZ,EAMYC,YANZ,EAMsC;AAAA;;AAL3B,aAAAL,WAAA,GAAAA,WAAA;AACC,aAAAC,KAAA,GAAAA,KAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,eAAA,GAAAA,eAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AAVZ,aAAAC,OAAA,GAAU,KAAV;AACA,aAAAC,SAAA,GAAY,KAAZ;AACA,aAAAC,YAAA,GAAe,6DAAf;AASI;;;;mCAEO;AAAA;;AACP,eAAKC,EAAL,GAAU,KAAKR,KAAL,CAAWS,QAAX,CAAoBC,MAApB,CAA2B,IAA3B,CAAV;AACA,eAAKC,SAAL,GAAiB,CAAC,KAAKH,EAAvB,CAFO,CAIP;AACA;AACA;AACA;AACA;;AAEA,eAAKI,IAAL,GAAY,KAAKb,WAAL,CAAiBc,KAAjB,CAAuB;AAC/BC,iBAAK,EAAE,CAAC,EAAD,EAAK,0DAAWC,QAAhB,CADwB;AAE/BC,uBAAW,EAAE,CAAC,EAAD,CAFkB;AAG/BC,gBAAI,EAAE,CAAC,IAAD,EAAO,0DAAWF,QAAlB;AAHyB,WAAvB,CAAZ;;AAMA,cAAI,CAAC,KAAKJ,SAAV,EAAqB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAKT,eAAL,CAAqBgB,MAArB,GACKC,IADL,CACU,8DADV,EAEKC,SAFL,CAEe,UAAAC,SAAS,EAAI;AACtB,kBAAMC,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAe,UAAAC,QAAQ;AAAA,uBACrCC,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACG,QAAT,EAAX,EAAgCnB,EAAhC,KAAuC,KAAI,CAACA,EADP;AAAA,eAAvB,CAAhB;AAGA,kBAAMoB,GAAG,GAAGH,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACK,QAAR,EAAX,CAAZ;;AACA,mBAAI,CAACE,CAAL,CAAOf,KAAP,CAAagB,QAAb,CAAsBF,GAAG,CAACd,KAA1B;;AACA,mBAAI,CAACe,CAAL,CAAOb,WAAP,CAAmBc,QAAnB,CAA4BF,GAAG,CAACZ,WAAhC;;AACA,mBAAI,CAACa,CAAL,CAAOZ,IAAP,CAAYa,QAAZ,CAAqBF,GAAG,CAACX,IAAzB,EAPsB,CAQtB;;;AACAc,qBAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,GAAvB;AACD,aAZL;AAaH;AACJ,S,CAED;;;;mCAGW;AACP,eAAKtB,SAAL,GAAiB,IAAjB,CADO,CAGP;;AACA,eAAKF,YAAL,CAAkB6B,KAAlB,GAJO,CAMP;;AACA,cAAI,KAAKrB,IAAL,CAAUsB,OAAd,EAAuB;AACnB;AACH;;AAED,eAAK7B,OAAL,GAAe,IAAf;;AACA,cAAI,KAAKM,SAAT,EAAoB;AAChB,iBAAKwB,oBAAL;AACH,WAFD,MAEO;AACH,iBAAKA,oBAAL,CAA0B,KAAK3B,EAA/B;AACH;AACJ;;;6CAE4BA,E,EAAa;AAAA;;AACxC,cAAM4B,MAAM,GAAG,KAAKxB,IAAL,CAAUyB,KAAzB;;AACA,cAAI7B,EAAJ,EAAQ;AACN4B,kBAAM,CAAC5B,EAAP,GAAYA,EAAZ;AACD,WAFD,MAEO;AACH4B,kBAAM,CAAC5B,EAAP,GAAY,KAAKL,cAAL,CAAoBmC,SAApB,CAA8B9B,EAA9B,GAAmC,GAAnC,GAAyC,KAAK+B,MAAL,EAArD;AACH;;AACD,eAAKrC,eAAL,CAAqBiC,oBAArB,CAA0CC,MAA1C,EACKjB,IADL,CACU,8DADV,EAEKC,SAFL,CAGQ,UAAAoB,IAAI,EAAI;AACJ,kBAAI,CAACpC,YAAL,CAAkBqC,OAAlB,CAA0B,6BAA1B,EAAyD;AAAEC,kCAAoB,EAAE;AAAxB,aAAzD;;AACA,kBAAI,CAACzC,MAAL,CAAY0C,QAAZ,CAAqB,CAAC,GAAD,EAAM;AAAEC,wBAAU,EAAE,MAAI,CAAC5C;AAAnB,aAAN,CAArB;AACH,WANT,EAOQ,UAAA6C,KAAK,EAAI;AACL,kBAAI,CAACzC,YAAL,CAAkByC,KAAlB,CAAwBA,KAAxB;;AACA,kBAAI,CAACxC,OAAL,GAAe,KAAf;AACH,WAVT;AAWD;;;iCAEgB;AACf,iBAAO,uCAAuCyC,OAAvC,CAA+C,OAA/C,EAAwD,UAASC,CAAT,EAAY;AACzE,gBAAMC,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqB,CAA/B;AAAA,gBAAkCC,CAAC,GAAGJ,CAAC,IAAI,GAAL,GAAWC,CAAX,GAAgBA,CAAC,GAAG,GAAJ,GAAU,GAAhE;AACA,mBAAOG,CAAC,CAACxB,QAAF,CAAW,EAAX,CAAP;AACD,WAHM,CAAP;AAID;;;4BA9CO;AAAE,iBAAO,KAAKf,IAAL,CAAUwC,QAAjB;AAA4B;;;;;;;uBA1D7BtD,gB,EAAgB,2H,EAAA,+H,EAAA,uH,EAAA,0H,EAAA,yH,EAAA,uH;AAAA,K;;;YAAhBA,gB;AAAgB,mC;AAAA,e;AAAA,c;AAAA,4rB;AAAA;AAAA;AChB7B;;AAA8C;;AAAU;;AAA6C;;AACpG;;AACD;;AAOA;;AAAyB;AAAA,mBAAY,IAAAuD,QAAA,EAAZ;AAAsB,WAAtB;;AACrB;;AACE;;AACE;;AAAW;;AAAK;;AAChB;;AACA;;AAGF;;AACA;;AACI;;AAAW;;AAAI;;AACf;;AACI;;AAA0C;;AAAuB;;AACjE;;AAA0C;;AAAuB;;AACjE;;AAA0C;;AAAuB;;AACjE;;AAA4C;;AAAyB;;AACrE;;AAA0C;;AAAuB;;AACjE;;AAA4C;;AAAyB;;AACrE;;AAA2C;;AAAwB;;AACnE;;AAA0C;;AAAuB;;AACjE;;AAAyC;;AAAsB;;AACnE;;AACA;;AAGJ;;AACA;;AACF;;AACA;;AACE;;AACE;;AAAW;;AAAW;;AACtB;;AACF;;AACF;;AACA;;AACA;;AACI;;AACI;;AACA;;AACJ;;AACA;;AAAqE;;AAAM;;AAC/E;;AACJ;;;;AAlDK;;AAAA;;AACD;;AAAA;;AAOE;;AAAA;;AAKO;;AAAA;;AAOa;;AAAA;;AAA8B;;AAAA;;AAC9B;;AAAA;;AAA8B;;AAAA;;AAC9B;;AAAA;;AAA8B;;AAAA;;AAC9B;;AAAA;;AAAgC;;AAAA;;AAChC;;AAAA;;AAA8B;;AAAA;;AAC9B;;AAAA;;AAAgC;;AAAA;;AAChC;;AAAA;;AAA+B;;AAAA;;AAC/B;;AAAA;;AAA8B;;AAAA;;AAC9B;;AAAA;;AAA6B;;AAAA;;AAExC;;AAAA;;AAIe;;AAAA;;AAUgC;;AAAA;;AAC5C;;AAAA;;AACO;;AAAA;;;;;;;;;sED/BZvD,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACTwD,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEhB7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAGaC,e;;;;;uBAAAA,e;AAAe,K;;;YAAfA,e;AAAe,mC;AAAA,c;AAAA,a;AAAA;AAAA;ACH5B;;;;;;;;;sEDGaA,e,EAAe;cAD3B,uDAC2B;eADjB;AAAEF,qBAAW,EAAE;AAAf,S;AACiB,Q;;;;;;;;;;;;;;;;;;AEH5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACoCA;;AACE;;AAAW;;AAAM;;AACjB;;AACA;;AAAgB;AAAA;;AAAA;;AAAA;AAAA;;AAAhB;;AACF;;;;;;AAEA;;AAAkD;;AAA0C;;;;;;;;AAKxF;;AACE;;AAAc;AAAA;;AAAA;;AAAA,mDAAoC,IAApC;AAAwC,SAAxC;;AAId;;AACF;;;;;;AAJgB;;AAAA,mIAAmD,eAAnD,EAAmD,sDAAnD,EAAmD,YAAnD,EAAmD,sBAAnD;;;;;;;;AAKhB;;AACE;;AAAc;AAAA;;AAAA,iBAASG,MAAM,CAACC,eAAP,EAAT;AAAiC,SAAjC,EAAkC,QAAlC,EAAkC;AAAA;;AAAA;;AAAA;;AAAA,0BACf,QAAAC,SAAA,gBADe,GACS,IADT;AACa,SAD/C;;AAId;;AACF;;;;;;;;AAHgB;;AAAA,kHAAqC,YAArC,EAAqC,6BAArC;;;;;;AAQhB;;AAAuC;;AAAK;;;;;;AAC5C;;AAAoF;;AAAkB;;;;;;AAAhD;;AAA8B;;AAAA;;;;;;AAKpF;;AAAuC;;AAAM;;;;;;AAC7C;;AAA+E;;AAAY;;;;;;AAApC;;AAAwB;;AAAA;;;;;;AAK/E;;;;;;AACA;;AAAqC;;AAA+C;;;;;;AAA1C;;AAAA;;;;;;AAG5C;;;;;;;;AACA;;AACI;AAAA;;AAAA;;AAAA;;AAAA,iBAAS,QAAAA,SAAA,gBAAT;AAA8B,SAA9B;;AACJ;;;;;;AAzCF;;AAGE;;AACE;;AAOA;;AAOF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAEA;;AACA;;AAGF;;;;;;AA1CkC;;AAsCb;;AAAA;;AACP;;AAAA;;;;QDpEDC,a;AAOT,6BAAoB1D,cAApB,EAAoD;AAAA;;AAAhC,aAAAA,cAAA,GAAAA,cAAA;AANpB,aAAA2D,KAAA,GAAgB,EAAhB;AACA,aAAAC,gBAAA,GAA6B,CAAC,QAAD,EAAW,UAAX,EAAuB,IAAvB,EAA6B,OAA7B,CAA7B;AAEA,aAAAH,SAAA,GAAY,IAAI,uEAAJ,CAAyB,IAAzB,EAA+B,EAA/B,CAAZ;AACA,aAAAvD,OAAA,GAAU,IAAV;AAEsD;;;;mCAE3C;AAAA;;AACP;AACA0B,iBAAO,CAACC,GAAR,CAAY,SAAZ;AACA,eAAK7B,cAAL,CAAoBe,MAApB,GACKC,IADL,CACU,8DADV,EAEKC,SAFL,CAEe,UAAA0C,KAAK,EAAI;AAClBA,iBAAK,CAACE,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,kBAAMC,UAAU,GAAGD,IAAI,CAACtC,QAAL,EAAnB;;AACA,oBAAI,CAACmC,KAAL,CAAWK,IAAX,CAAgB1C,IAAI,CAACC,KAAL,CAAWwC,UAAX,CAAhB;AACD,aAHD;AAIA,kBAAI,CAACE,UAAL,GAAkB,IAAI,0EAAJ,CAA6B,MAAI,CAACN,KAAlC,CAAlB;;AACA,kBAAI,CAACM,UAAL,CAAgBC,eAAhB,GAAkC,UAAS7B,IAAT,EAAe8B,MAAf,EAAqB;AACrD,qBAAQ9B,IAAI,CAAC+B,QAAL,CAAcC,WAAd,GAA4BC,QAA5B,CAAqCH,MAArC,KACR9B,IAAI,CAAChC,EAAL,CAAQgE,WAAR,GAAsBC,QAAtB,CAA+BH,MAA/B,CADA;AAED,aAHD;;AAIA,kBAAI,CAACjE,OAAL,GAAe,KAAf;AACD,WAbL;AAcH,S,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF;;;;wCACgB;AACd,cAAMqE,WAAW,GAAG,KAAKd,SAAL,CAAee,QAAf,CAAwBC,MAA5C;AACA,cAAMC,OAAO,GAAG,KAAKT,UAAL,CAAgB5B,IAAhB,CAAqBoC,MAArC;AACA,iBAAOF,WAAW,KAAKG,OAAvB;AACD;AAED;;;;uCACe;AAAA;;AACb,eAAKC,aAAL,KACI,KAAKlB,SAAL,CAAe3B,KAAf,EADJ,GAEI,KAAKmC,UAAL,CAAgB5B,IAAhB,CAAqBwB,OAArB,CAA6B,UAAAe,GAAG;AAAA,mBAAI,MAAI,CAACnB,SAAL,CAAeoB,MAAf,CAAsBD,GAAtB,CAAJ;AAAA,WAAhC,CAFJ;AAGD;AAED;;;;sCACcA,G,EAAU;AACtB,cAAI,CAACA,GAAL,EAAU;AACR,6BAAU,KAAKD,aAAL,KAAuB,QAAvB,GAAkC,UAA5C;AACD;;AACD,2BAAU,KAAKlB,SAAL,CAAeqB,UAAf,CAA0BF,GAA1B,IAAiC,UAAjC,GAA8C,QAAxD,kBAAwEA,GAAG,CAACvE,EAA5E;AACD;;;oCAEW0E,K,EAAc;AACxB,cAAMC,WAAW,GAAID,KAAK,CAACE,MAAN,CAAkC/C,KAAvD;AACA,eAAK+B,UAAL,CAAgBE,MAAhB,GAAyBa,WAAW,CAACE,IAAZ,GAAmBb,WAAnB,EAAzB;AACD;;;;;;;uBA/DUX,a,EAAa,yH;AAAA,K;;;YAAbA,a;AAAa,oC;AAAA,c;AAAA,a;AAAA,2oC;AAAA;AAAA;ACd1B;;AAAI;;AAAK;;AAoCT;;AAMA;;AACA;;;;AAPgB;;AAAA;;AAMX;;AAAA;;AACE;;AAAA;;;;;;;;;sED7BMA,a,EAAa;cALzB,uDAKyB;eALf;AACTP,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;;;AEd1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAQA,QAAM8B,MAAM,GAAW,CACnB;AACIC,UAAI,EAAE,EADV;AACcC,eAAS,EAAE,iEADzB;AAEIC,cAAQ,EAAE,CACN;AAAEF,YAAI,EAAE,EAAR;AAAYC,iBAAS,EAAE;AAAvB,OADM,EAEN;AAAED,YAAI,EAAE,OAAR;AAAiBC,iBAAS,EAAE;AAA5B,OAFM,EAGN;AAAED,YAAI,EAAE,KAAR;AAAeC,iBAAS,EAAE;AAA1B,OAHM,EAIN;AAAED,YAAI,EAAE,UAAR;AAAoBC,iBAAS,EAAE;AAA/B,OAJM;AAFd,KADmB,CAAvB;;QAgBaE,kB;;;;;YAAAA;;;;yBAAAA,kB;AAAkB,O;AAAA,gBAHlB,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAlBI,kB,EAAkB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEbA,kB,EAAkB;cAJ9B,sDAI8B;eAJrB;AACNE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBL,MAAtB,CAAD,CADH;AAENO,iBAAO,EAAE,CAAC,4DAAD;AAFH,S;AAIqB,Q;;;;;;;;;;;;;;;;;;ACxB/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA4BaC,W;;;;;YAAAA;;;;yBAAAA,W;AAAW,O;AAAA,gBAdX,CACL,4DADK,EAEL,kEAFK,EAGL,wEAHK,EAIL,8EAJK,CAcW;;;;0HAAXA,W,EAAW;AAAA,uBAPhB,iEAOgB,EANhB,6DAMgB,EALhB,mEAKgB,EAJhB,oEAIgB,EAHhB,uFAGgB;AAHS,kBAVzB,4DAUyB,EATzB,kEASyB,EARzB,wEAQyB,EAPzB,8EAOyB;AAGT,O;AAVK,K;;;;;sEAUhBA,W,EAAW;cAfvB,sDAeuB;eAfd;AACNF,iBAAO,EAAE,CACL,4DADK,EAEL,kEAFK,EAGL,wEAHK,EAIL,8EAJK,CADH;AAONG,sBAAY,EAAE,CACV,iEADU,EAEV,6DAFU,EAGV,mEAHU,EAIV,oEAJU,EAKV,uFALU;AAPR,S;AAec,Q;;;;;;;;;;;;;;;;;;AC5BxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaC,yB,GAMX,qCAAc;AAAA;;AAJd,WAAAzF,YAAA,GAAe,6DAAf;AACA,WAAA0F,YAAA,GAAe,6DAAf;AAGgB,K;;;uBANLD,yB;AAAyB,K;;;YAAzBA,yB;AAAyB,6C;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,iD;AAAA;AAAA;ACRtC;;AACE;;AACF;;;;AAFM;;AAC+B;;AAAA;;AAAzB;;;;;;;;;sEDOCA,yB,EAAyB;cALrC,uDAKqC;eAL3B;AACT1C,kBAAQ,EAAE,wBADD;AAETC,qBAAW,EAAE,qCAFJ;AAGT2C,gBAAM,EAAE;AAHC,S;AAK2B,Q;;;;gBAInC;;;;;;;;;;;;;;;;;;;;AEZH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACEA;;AACE;;AAAW;;AAAM;;AACjB;;AACA;;AAAgB;AAAA;;AAAA;;AAAA;AAAA;;AAAhB;;AACF;;;;;;AAEA;;AAAkD;;AAA0C;;;;;;AAuBxF;;AAAuC;;AAAM;;;;;;AAC7C;;AACE;;AACF;;;;;;AAFmC;;AAAgD;;AACjF;;AAAA;;;;;;AAMF;;AAAuC;;AAAY;;;;;;AACnD;;AAA4F;;AAAoB;;;;;;AAApD;;AAAgC;;AAAA;;;;;;AAK5F;;AAA2D;;AAAK;;;;;;AAChE;;AACE;;AACF;;;;;;AAD0B;;AAAA;;;;;;AAI5B;;;;;;AACA;;;;;;AACE;;;;;;AA5CJ;;AAqBE;;AACE;;AACA;;AAGF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAGF;;AAEA;;AACA;;AAMF;;;;;;AAjDkC;;AA0Cb;;AAAA;;AACP;;AAAA;;;;QDrCDC,gB;AAQT,gCAAoBjG,eAApB,EAA8DE,YAA9D,EAA0F;AAAA;;AAAtE,aAAAF,eAAA,GAAAA,eAAA;AAA0C,aAAAE,YAAA,GAAAA,YAAA;AAP9D,aAAAiB,SAAA,GAAwB,EAAxB,CAO0F,CAN1F;;AACA,aAAA0C,gBAAA,GAA6B,CAAC,OAAD,EAAU,aAAV,EAAyB,MAAzB,CAA7B,CAK0F,CAH1F;;AACA,aAAA1D,OAAA,GAAU,IAAV;AAE4F;;;;mCAEjF;AAAA;;AACP,eAAKH,eAAL,CAAqBgB,MAArB,GACKC,IADL,CACU,8DADV,EAEKC,SAFL,CAEe,UAAAC,SAAS,EAAI;AACtBA,qBAAS,CAAC2C,OAAV,CAAkB,UAAAxC,QAAQ,EAAI;AAC5B,kBAAM4E,cAAc,GAAG5E,QAAQ,CAACG,QAAT,EAAvB;;AACA,oBAAI,CAACN,SAAL,CAAe8C,IAAf,CAAoB1C,IAAI,CAACC,KAAL,CAAW0E,cAAX,CAApB;AACD,aAHD;AAIA,kBAAI,CAAChC,UAAL,GAAkB,IAAI,0EAAJ,CAAiC,MAAI,CAAC/C,SAAtC,CAAlB;AACA,kBAAI,CAAChB,OAAL,GAAe,KAAf;;AACA,kBAAI,CAAC+D,UAAL,CAAgBC,eAAhB,GAAkC,UAAS7B,IAAT,EAAe8B,MAAf,EAAqB;AACrD,qBAAQ9B,IAAI,CAAC1B,KAAL,CAAW0D,WAAX,GAAyBC,QAAzB,CAAkCH,MAAlC,KACR9B,IAAI,CAACxB,WAAL,CAAiBwD,WAAjB,GAA+BC,QAA/B,CAAwCH,MAAxC,CADQ,IAER9B,IAAI,CAACvB,IAAL,CAAUuD,WAAV,GAAwBC,QAAxB,CAAiCH,MAAjC,CAFA;AAGD,aAJD;AAKD,WAdL,EAeI,UAAAzB,KAAK,EAAI;AACL,kBAAI,CAACzC,YAAL,CAAkByC,KAAlB,CAAwBA,KAAxB;;AACA,kBAAI,CAACxC,OAAL,GAAe,KAAf;AACH,WAlBL;AAmBH,S,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;oCAEY6E,K,EAAc;AACxB,cAAMC,WAAW,GAAID,KAAK,CAACE,MAAN,CAAkC/C,KAAvD;AACA,eAAK+B,UAAL,CAAgBE,MAAhB,GAAyBa,WAAW,CAACE,IAAZ,GAAmBb,WAAnB,EAAzB;AACD;;;;;;;uBAnEU2B,gB,EAAgB,0H,EAAA,uH;AAAA,K;;;YAAhBA,gB;AAAgB,mC;AAAA,c;AAAA,a;AAAA,8vC;AAAA;AAAA;ACf7B;;AAAI;;AAAS;;AACb;;AAAwD;;AAAY;;AACpE;;AAMA;;AACA;;;;AAPgB;;AAAA;;AAMX;;AAAA;;AACE;;AAAA;;;;;;;;;sEDMMA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACT7C,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKkB,Q","file":"users-users-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormControl, FormGroupDirective, FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { first } from 'rxjs/operators';\n\nimport { VacationService, AccountService, AlertService } from '../_services';\n\nimport { Vacation } from '../_models';\nimport { VacationType } from '../_models/vacation';\n\n@Component({\n  selector: 'app-add-edit',\n  templateUrl: './add-edit.component.html',\n  styleUrls: ['./add-edit.component.scss']\n})\nexport class AddEditComponent implements OnInit {\n    form: FormGroup;\n    id: string;\n    isAddMode: boolean;\n    loading = false;\n    submitted = false;\n    VacationType = VacationType;\n\n    constructor(\n        public formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private vacationService: VacationService,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) {}\n\n    ngOnInit() {\n        this.id = this.route.snapshot.params['id'];\n        this.isAddMode = !this.id;\n\n        // // password not required in edit mode\n        // const passwordValidators = [Validators.minLength(6)];\n        // if (this.isAddMode) {\n        //     passwordValidators.push(Validators.required);\n        // }\n\n        this.form = this.formBuilder.group({\n            title: ['', Validators.required],\n            description: [''],\n            type: [null, Validators.required]\n        });\n\n        if (!this.isAddMode) {\n            // this.accountService.getById(this.id)\n            //     .pipe(first())\n            //     .subscribe(x => {\n            //         this.f.firstName.setValue('');\n            //         this.f.lastName.setValue('');\n            //         this.f.username.setValue(x.username);\n            //     });\n            this.vacationService.getAll()\n                .pipe(first())\n                .subscribe(vacations => {\n                  const vacJson = vacations.find(vacation =>\n                    JSON.parse(vacation.toString()).id === this.id\n                  );\n                  const vac = JSON.parse(vacJson.toString());\n                  this.f.title.setValue(vac.title);\n                  this.f.description.setValue(vac.description);\n                  this.f.type.setValue(vac.type);\n                  //remove\n                  console.log('edit!!!', vac);\n                });\n        }\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        if (this.isAddMode) {\n            this.createUpdateVacation();\n        } else {\n            this.createUpdateVacation(this.id);\n        }\n    }\n\n    private createUpdateVacation(id?: string) {\n      const newVac = this.form.value;\n      if (id) {\n        newVac.id = id;\n      } else {\n          newVac.id = this.accountService.userValue.id + '-' + this.uuidv4();\n      }\n      this.vacationService.createUpdateVacation(newVac)\n          .pipe(first())\n          .subscribe(\n              data => {\n                  this.alertService.success('Vacation added successfully', { keepAfterRouteChange: true });\n                  this.router.navigate(['.', { relativeTo: this.route }]);\n              },\n              error => {\n                  this.alertService.error(error);\n                  this.loading = false;\n              });\n    }\n\n    private uuidv4() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n      });\n    }\n\n    // private updateUser() {\n    //     this.accountService.update(this.id, this.form.value)\n    //         .pipe(first())\n    //         .subscribe(\n    //             data => {\n    //                 this.alertService.success('Update successful', { keepAfterRouteChange: true });\n    //                 this.router.navigate(['..', { relativeTo: this.route }]);\n    //             },\n    //             error => {\n    //                 this.alertService.error(error);\n    //                 this.loading = false;\n    //             });\n    // }\n}\n","<a class=\"vh-breadcrumbs\" routerLink=\"/users\">Vacations <mat-icon svgIcon=\"chevron-right\"></mat-icon></a>\n﻿<h1 *ngIf=\"isAddMode\">Add Vacation</h1>\n<h1 *ngIf=\"!isAddMode\">Edit Vacation</h1>\n<!-- <form [formGroup]=\"form\">\n  <mat-select [(value)]=\"selected\" formControlName=\"grade\">\n   <mat-option [value]=\"gradeArray\" *ngFor=\"let gradeArray of GradeArray\">{{gradeArray}}\n   </mat-option>\n </mat-select>\n</form> -->\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"vac-row\">\n      <mat-form-field class=\"vac-title\">\n        <mat-label>Title</mat-label>\n        <input matInput formControlName=\"title\" required/>\n        <div *ngIf=\"submitted && f.title.errors\" class=\"vh-invalid-feedback\">\n            <div *ngIf=\"f.title.errors.required\">Title is required</div>\n        </div>\n      </mat-form-field>\n      <mat-form-field class=\"vac-type\">\n          <mat-label>Type</mat-label>\n          <mat-select formControlName=\"type\" required>\n              <mat-option [value]=\"VacationType.travel\">{{VacationType.travel}}</mat-option>\n              <mat-option [value]=\"VacationType.cruise\">{{VacationType.cruise}}</mat-option>\n              <mat-option [value]=\"VacationType.sports\">{{VacationType.sports}}</mat-option>\n              <mat-option [value]=\"VacationType.shopping\">{{VacationType.shopping}}</mat-option>\n              <mat-option [value]=\"VacationType.flight\">{{VacationType.flight}}</mat-option>\n              <mat-option [value]=\"VacationType.business\">{{VacationType.business}}</mat-option>\n              <mat-option [value]=\"VacationType.virtual\">{{VacationType.virtual}}</mat-option>\n              <mat-option [value]=\"VacationType.nature\">{{VacationType.nature}}</mat-option>\n              <mat-option [value]=\"VacationType.other\">{{VacationType.other}}</mat-option>\n          </mat-select>\n          <div *ngIf=\"submitted && f.type.errors\" class=\"vh-invalid-feedback\">\n              <div *ngIf=\"f.type.errors.required\">Type is required</div>\n          </div>\n      </mat-form-field>\n      <app-vacation-type-icon [vacationType]=\"f.type.value\"></app-vacation-type-icon>\n    </div>\n    <div class=\"vac-row\">\n      <mat-form-field class=\"vac-desc\">\n        <mat-label>Description</mat-label>\n        <textarea matInput formControlName=\"description\"></textarea>\n      </mat-form-field>\n    </div>\n    <br>\n    <div class=\"vac-buttons\">\n        <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"loading\">\n            <span *ngIf=\"!loading\">Save</span>\n            <mat-spinner *ngIf=\"loading\" diameter=\"30\"></mat-spinner>\n        </button>\n        <button mat-button color=\"primary\" routerLink=\"/users\" type=\"button\">Cancel</button>\n    </div>\n</form>\n","import { Component } from '@angular/core';\n\n@Component({ templateUrl: 'layout.component.html' })\nexport class LayoutComponent { }","<router-outlet></router-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport { first } from 'rxjs/operators';\n\nimport { User } from '../_models';\nimport { AccountService } from '../_services';\n\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {MatTableDataSource} from '@angular/material/table';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit {\n    users: User[] = [];\n    displayedColumns: string[] = ['select', 'username', 'id', 'image'];\n    dataSource: MatTableDataSource<any>;\n    selection = new SelectionModel<User>(true, []);\n    loading = true;\n\n    constructor(private accountService: AccountService) {}\n\n    ngOnInit() {\n        //remove\n        console.log('in list');\n        this.accountService.getAll()\n            .pipe(first())\n            .subscribe(users => {\n              users.forEach(user => {\n                const userString = user.toString();\n                this.users.push(JSON.parse(userString))\n              });\n              this.dataSource = new MatTableDataSource<User>(this.users);\n              this.dataSource.filterPredicate = function(data, filter): boolean {\n                return (data.username.toLowerCase().includes(filter) ||\n                data.id.toLowerCase().includes(filter));\n              };\n              this.loading = false;\n            });\n    }\n\n    // deleteUser(id: string) {\n    //     const user = this.users.find(x => x.id === id);\n    //     user.isDeleting = true;\n    //     this.accountService.delete(id)\n    //         .pipe(first())\n    //         .subscribe(() => {\n    //             this.users = this.users.filter(x => x.id !== id)\n    //         });\n    // }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n        this.selection.clear() :\n        this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: User): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.id}`;\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n}\n","<h1>Users</h1>\n<!-- <a routerLink=\"add\" class=\"btn btn-sm btn-success mb-2\">Add User</a>\n<table class=\"table table-striped\">\n    <thead>\n        <tr>\n            <th style=\"width: 30%\">First Name</th>\n            <th style=\"width: 30%\">Last Name</th>\n            <th style=\"width: 30%\">Username</th>\n            <th style=\"width: 10%\"></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let user of users\">\n            <td>{{user.firstName}}</td>\n            <td>{{user.lastName}}</td>\n            <td>{{user.username}}</td>\n            <td style=\"white-space: nowrap\">\n                <a routerLink=\"edit/{{user.id}}\" class=\"btn btn-sm btn-primary mr-1\">Edit</a>\n                <button (click)=\"deleteUser(user.id)\" class=\"btn btn-sm btn-danger btn-delete-user\" [disabled]=\"user.isDeleting\">\n                    <span *ngIf=\"user.isDeleting\" class=\"spinner-border spinner-border-sm\"></span>\n                    <span *ngIf=\"!user.isDeleting\">Delete</span>\n                </button>\n            </td>\n        </tr>\n        <tr *ngIf=\"!users\">\n            <td colspan=\"4\" class=\"text-center\">\n                <span class=\"spinner-border spinner-border-lg align-center\"></span>\n            </td>\n        </tr>\n    </tbody>\n</table> -->\n<!-- <div *ngFor=\"let user of users\">\n    User name:<div>{{user.username}}</div>\n    Email: <div>{{user.id}}</div>\n    Image: <div><img [src]=\"user.image\"></div>\n</div> -->\n<mat-form-field *ngIf=\"!loading\">\n  <mat-label>Filter</mat-label>\n  <mat-icon svgIcon=\"search\" matPrefix class=\"vh-prefix-icon\"></mat-icon>\n  <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Filter\">\n</mat-form-field>\n\n<div *ngIf=\"loading\" class=\"vh-spinner-container\"><mat-spinner color=\"accent\"></mat-spinner></div>\n<table *ngIf=\"!loading\" mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z1\">\n\n  <!-- Checkbox Column -->\n  <ng-container matColumnDef=\"select\">\n    <th mat-header-cell *matHeaderCellDef>\n      <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                    [aria-label]=\"checkboxLabel()\">\n      </mat-checkbox>\n    </th>\n    <td mat-cell *matCellDef=\"let row\">\n      <mat-checkbox (click)=\"$event.stopPropagation()\"\n                    (change)=\"$event ? selection.toggle(row) : null\"\n                    [checked]=\"selection.isSelected(row)\"\n                    [aria-label]=\"checkboxLabel(row)\">\n      </mat-checkbox>\n    </td>\n  </ng-container>\n\n  <!-- Name Column -->\n  <ng-container matColumnDef=\"username\">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef=\"let user\" class=\"name-cell\" [matTooltip]=\"user.username\"> {{user.username}} </td>\n  </ng-container>\n\n  <!-- Email Column -->\n  <ng-container matColumnDef=\"id\">\n    <th mat-header-cell *matHeaderCellDef> Email </th>\n    <td mat-cell *matCellDef=\"let user\" class=\"email-cell\" [matTooltip]=\"user.id\"> {{user.id}} </td>\n  </ng-container>\n\n  <!-- Image Column -->\n  <ng-container matColumnDef=\"image\">\n    <th mat-header-cell *matHeaderCellDef> </th>\n    <td mat-cell *matCellDef=\"let user\"> <img [src]=\"user.image\" class=\"vh-user-image\"> </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"\n      (click)=\"selection.toggle(row);\">\n  </tr>\n</table>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LayoutComponent } from './layout.component';\nimport { VaclistComponent } from './vaclist.component';\nimport { ListComponent } from './list.component';\nimport { AddEditComponent } from './add-edit.component';\n\nconst routes: Routes = [\n    {\n        path: '', component: LayoutComponent,\n        children: [\n            { path: '', component: VaclistComponent },\n            { path: 'users', component: ListComponent },\n            { path: 'add', component: AddEditComponent },\n            { path: 'edit/:id', component: AddEditComponent }\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class UsersRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { UsersRoutingModule } from './users-routing.module';\nimport { LayoutComponent } from './layout.component';\nimport { ListComponent } from './list.component';\nimport { VaclistComponent } from './vaclist.component';\nimport { AddEditComponent } from './add-edit.component';\nimport { VacationTypeIconComponent } from './vacation-type-icon.component';\n\nimport { AngularMaterialModule } from '../angular-material.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        UsersRoutingModule,\n        AngularMaterialModule\n    ],\n    declarations: [\n        LayoutComponent,\n        ListComponent,\n        VaclistComponent,\n        AddEditComponent,\n        VacationTypeIconComponent\n    ]\n})\nexport class UsersModule { }\n","import { Component, Input } from '@angular/core';\nimport { VacationType, VacationUtil } from '../_models/vacation';\n\n@Component({\n  selector: 'app-vacation-type-icon',\n  templateUrl: './vacation-type-icon.component.html',\n  styles: []\n})\nexport class VacationTypeIconComponent {\n\n  VacationType = VacationType;\n  VacationUtil = VacationUtil;\n  @Input() vacationType: VacationType;\n\n  constructor() {}\n}\n","<span [matTooltip]=\"VacationUtil.capitalize(vacationType)\">\n  <mat-icon [svgIcon]=\"vacationType\" [class]=\"vacationType\"></mat-icon>\n</span>\n","import { Component, OnInit } from '@angular/core';\nimport { first } from 'rxjs/operators';\n\nimport { User } from '../_models';\nimport { Vacation } from '../_models';\nimport { VacationService, AlertService } from '../_services';\n\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {MatTableDataSource} from '@angular/material/table';\n\n@Component({\n  selector: 'app-vac-list',\n  templateUrl: './vaclist.component.html',\n  styleUrls: ['./vaclist.component.scss']\n})\nexport class VaclistComponent implements OnInit {\n    vacations: Vacation[] = [];\n    //displayedColumns: string[] = ['select', 'title', 'description', 'type'];\n    displayedColumns: string[] = ['title', 'description', 'type'];\n    dataSource: MatTableDataSource<any>;\n    //selection = new SelectionModel<Vacation>(true, []);\n    loading = true;\n\n    constructor(private vacationService: VacationService, private alertService: AlertService) {}\n\n    ngOnInit() {\n        this.vacationService.getAll()\n            .pipe(first())\n            .subscribe(vacations => {\n              vacations.forEach(vacation => {\n                const vacationString = vacation.toString();\n                this.vacations.push(JSON.parse(vacationString))\n              });\n              this.dataSource = new MatTableDataSource<Vacation>(this.vacations);\n              this.loading = false;\n              this.dataSource.filterPredicate = function(data, filter): boolean {\n                return (data.title.toLowerCase().includes(filter) ||\n                data.description.toLowerCase().includes(filter) ||\n                data.type.toLowerCase().includes(filter));\n              };\n            },\n            error => {\n                this.alertService.error(error);\n                this.loading = false;\n            });\n    }\n\n    // deleteUser(id: string) {\n    //     const user = this.users.find(x => x.id === id);\n    //     user.isDeleting = true;\n    //     this.accountService.delete(id)\n    //         .pipe(first())\n    //         .subscribe(() => {\n    //             this.users = this.users.filter(x => x.id !== id)\n    //         });\n    // }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  // isAllSelected() {\n  //   const numSelected = this.selection.selected.length;\n  //   const numRows = this.dataSource.data.length;\n  //   return numSelected === numRows;\n  // }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  // masterToggle() {\n  //   this.isAllSelected() ?\n  //       this.selection.clear() :\n  //       this.dataSource.data.forEach(row => this.selection.select(row));\n  // }\n\n  /** The label for the checkbox on the passed row */\n  // checkboxLabel(row?: Vacation): string {\n  //   if (!row) {\n  //     return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\n  //   }\n  //   return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.id}`;\n  // }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  // typeToColor(str: string) {\n  //     if (str === 'Other') {\n  //       //return '#ff5252';\n  //       return '#448aff';\n  //     }\n  //     let hash = 0;\n  //     for (let i = 0; i < str.length; i++) {\n  //         //hash = str.charCodeAt(i) + ((hash << 2) - hash);\n  //         hash = str.charCodeAt(i) + ((hash << 8) - hash);\n  //     }\n  //     let color = '#';\n  //     for (let i = 0; i < 3; i++) {\n  //         let value = (hash >> (i * 8)) & 0xFF;\n  //         color += ('00' + value.toString(16)).substr(-2);\n  //     }\n  //     return color;\n  // }\n}\n","<h1>Vacations</h1>\n<button mat-flat-button color=\"accent\" routerLink=\"add\">Add Vacation</button>\n<mat-form-field *ngIf=\"!loading\">\n  <mat-label>Filter</mat-label>\n  <mat-icon svgIcon=\"search\" matPrefix class=\"vh-prefix-icon\"></mat-icon>\n  <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Filter\">\n</mat-form-field>\n\n<div *ngIf=\"loading\" class=\"vh-spinner-container\"><mat-spinner color=\"accent\"></mat-spinner></div>\n<table *ngIf=\"!loading\" mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z1\">\n\n  <!-- Checkbox Column -->\n  <!-- <ng-container matColumnDef=\"select\">\n    <th mat-header-cell *matHeaderCellDef>\n      <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                    [aria-label]=\"checkboxLabel()\">\n      </mat-checkbox>\n    </th>\n    <td mat-cell *matCellDef=\"let row\">\n      <mat-checkbox (click)=\"$event.stopPropagation()\"\n                    (change)=\"$event ? selection.toggle(row) : null\"\n                    [checked]=\"selection.isSelected(row)\"\n                    [aria-label]=\"checkboxLabel(row)\">\n      </mat-checkbox>\n    </td>\n  </ng-container> -->\n\n  <!-- Title Column -->\n  <ng-container matColumnDef=\"title\">\n    <th mat-header-cell *matHeaderCellDef> Title </th>\n    <td mat-cell *matCellDef=\"let vac\" [class]=\"'border-'+vac.type\" class=\"title-cell\" [matTooltip]=\"vac.title\">\n      {{vac.title}}\n    </td>\n  </ng-container>\n\n  <!-- Descripiton Column -->\n  <ng-container matColumnDef=\"description\">\n    <th mat-header-cell *matHeaderCellDef> Description </th>\n    <td mat-cell *matCellDef=\"let vac\" class=\"description-cell\" [matTooltip]=\"vac.description\"> {{vac.description}} </td>\n  </ng-container>\n\n  <!-- Type Column -->\n  <ng-container matColumnDef=\"type\">\n    <th mat-header-cell *matHeaderCellDef class=\"icon-column\"> Type </th>\n    <td mat-cell *matCellDef=\"let vac\" class=\"icon-column\">\n      <app-vacation-type-icon [vacationType]=\"vac.type\"></app-vacation-type-icon>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"\n    routerLink=\"edit/{{row.id}}\">\n  </tr>\n  <!-- <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"\n      (click)=\"selection.toggle(row);\">\n  </tr> -->\n</table>\n"]}