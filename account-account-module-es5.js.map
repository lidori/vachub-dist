{"version":3,"sources":["webpack:///src/app/account/account-routing.module.ts","webpack:///src/app/account/account.module.ts","webpack:///src/app/account/layout.component.ts","webpack:///src/app/account/layout.component.html","webpack:///src/app/account/login.component.ts","webpack:///src/app/account/login.component.html","webpack:///src/app/account/register.component.ts","webpack:///src/app/account/register.component.html"],"names":["routes","path","component","children","AccountRoutingModule","forChild","imports","exports","AccountModule","declarations","LayoutComponent","router","accountService","userValue","navigate","templateUrl","LoginComponent","route","alertService","ngZone","loading","submitted","returnUrl","snapshot","queryParams","googleSDK","auth2","attachClickHandler","loginElement","nativeElement","googleUser","profile","getBasicProfile","token","getAuthResponse","id_token","id","getId","userName","getName","userImage","getImageUrl","userEmail","getEmail","console","log","authenticated","login","username","image","run","error","fakeData","window","load","init","client_id","cookiepolicy","scope","prepareLoginButton","d","s","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","fakeSignIn","RegisterComponent","formBuilder","form","group","firstName","required","lastName","password","minLength","clear","invalid","controls"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LayoutComponent } from './layout.component';\nimport { LoginComponent } from './login.component';\nimport { RegisterComponent } from './register.component';\n\nconst routes: Routes = [\n    {\n        path: '', component: LayoutComponent,\n        children: [\n            { path: 'login', component: LoginComponent },\n            { path: 'register', component: RegisterComponent }\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AccountRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { LayoutComponent } from './layout.component';\nimport { LoginComponent } from './login.component';\nimport { RegisterComponent } from './register.component';\n\nimport { AngularMaterialModule } from '../angular-material.module';\n\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        AccountRoutingModule,\n        AngularMaterialModule\n    ],\n    declarations: [\n        LayoutComponent,\n        LoginComponent,\n        RegisterComponent\n    ]\n})\nexport class AccountModule { }\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AccountService } from '../_services';\n\n@Component({ templateUrl: 'layout.component.html' })\nexport class LayoutComponent {\n    constructor(\n        private router: Router,\n        private accountService: AccountService\n    ) {\n        // redirect to home if already logged in\n        if (this.accountService.userValue) {\n            this.router.navigate(['/']);\n        }\n    }\n}\n","<router-outlet></router-outlet>\n","import { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '../_services';\n\nimport { Component, OnInit, ViewChild, ElementRef, NgZone } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({ templateUrl: 'login.component.html' })\nexport class LoginComponent implements OnInit {\n  auth2: any;\n  token: string;\n  id: string;\n  userName: string;\n  userImage: any;\n  userEmail: string;\n  @ViewChild('loginRef', {static: true }) loginElement: ElementRef;\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private accountService: AccountService,\n              private alertService: AlertService,\n              private ngZone: NgZone) {}\n\n  ngOnInit() {\n    // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    this.googleSDK();\n  }\n\n  prepareLoginButton() {\n\n    this.auth2.attachClickHandler(this.loginElement.nativeElement, {},\n      (googleUser) => {\n\n        let profile = googleUser.getBasicProfile();\n        this.token = googleUser.getAuthResponse().id_token;\n        this.id = profile.getId();\n        this.userName = profile.getName();\n        this.userImage = profile.getImageUrl();\n        this.userEmail = profile.getEmail();\n        console.log(this.token);\n        console.log(this.id);\n        console.log(this.userName);\n        console.log(this.userImage);\n        console.log(this.userEmail);\n        const authenticated = this.accountService.login(\n          {id: this.userEmail, username: this.userName, image: this.userImage as string},\n          this.auth2);\n        //remove\n        console.log('in prepare login auth is ', authenticated);\n        if (authenticated) {\n            this.ngZone.run(() => this.router.navigate([this.returnUrl]));\n        } else {\n          this.alertService.error('Not authenticated');\n          this.loading = false;\n        }\n      }, (error) => {\n        //alert(JSON.stringify(error, undefined, 2));\n        this.alertService.error(error);\n        this.loading = false;\n      });\n\n  }\n\n  fakeSignIn() {\n    this.fakeData();\n    const authenticated = this.accountService.login(\n      {id: this.userEmail, username: this.userName, image: this.userImage as string});\n    if (authenticated) {\n        this.router.navigate([this.returnUrl]);\n    } else {\n      this.alertService.error('Not authenticated');\n      this.loading = false;\n    }\n  }\n\n  // signOut() {\n  //   this.auth2.signOut().then(function () {\n  //     this.token = undefined;\n  //     this.id = undefined;\n  //     this.userName = undefined;\n  //     this.userImage = undefined;\n  //     this.userEmail = undefined;\n  //     console.log('User signed out.');\n  //   });\n  // }\n  //\n  // fakeSignOut() {\n  //   this.token = undefined;\n  //   this.id = undefined;\n  //   this.userName = undefined;\n  //   this.userImage = undefined;\n  //   this.userEmail = undefined;\n  //   console.log('User signed out.');\n  // }\n\n  googleSDK() {\n\n    window['googleSDKLoaded'] = () => {\n      window['gapi'].load('auth2', () => {\n        this.auth2 = window['gapi'].auth2.init({\n          client_id: '84095791683-jamqlcm8okffem4uldev6oas68stqjlh.apps.googleusercontent.com',\n          cookiepolicy: 'single_host_origin',\n          scope: 'profile email'\n        });\n        this.prepareLoginButton();\n      });\n    }\n\n    (function(d, s, id){\n      var js, fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {return;}\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://apis.google.com/js/platform.js?onload=googleSDKLoaded\";\n      fjs.parentNode.insertBefore(js, fjs);\n    }(document, 'script', 'google-jssdk'));\n\n  }\n\n  fakeData() {\n    this.token = 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjI4Yjc0MWU4ZGU5ODRhNDcxNTlmMTllNmQ3NzgzZTlkNGZhODEwZGIiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiODQwOTU3OTE2ODMtamFtcWxjbThva2ZmZW00dWxkZXY2b2FzNjhzdHFqbGguYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4NDA5NTc5MTY4My1qYW1xbGNtOG9rZmZlbTR1bGRldjZvYXM2OHN0cWpsaC5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExMTY3Mzg4NzUyNDE0ODgwODU4MiIsImVtYWlsIjoic2hpcmEueW9rZWRAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF0X2hhc2giOiJ4Q0F4NFNBRFVma0pPNUY3ZWdCWVZnIiwibmFtZSI6IlNoaXJhIFlva2VkIiwicGljdHVyZSI6Imh0dHBzOi8vbGg0Lmdvb2dsZXVzZXJjb250ZW50LmNvbS8tamVfQlpBaWlkRFEvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQUEvQUFLV0pKTWcxODBUNUdhZWpkZmFPR1poZ0JJLURLZGhtdy9zOTYtYy9waG90by5qcGciLCJnaXZlbl9uYW1lIjoiU2hpcmEiLCJmYW1pbHlfbmFtZSI6Illva2VkIiwibG9jYWxlIjoiZW4iLCJpYXQiOjE1ODgxMjAxMzksImV4cCI6MTU4ODEyMzczOSwianRpIjoiYTJmYWYyOWQwYjc0MTY2Yzc0YTdjZWFjZjViMWY0MDU5ZjNjZTBmNSJ9.qkA4O3jqjNsd1MHAZAbertNpOQ0fAYxXuE6NFNuGs9swJ9ZJcWtM9HC13jvc84bD5Bq63ewdCKsKPep1YbVTYKypCkntjHGsHiY5SBt4snDWI7v_4F84n4HZOcymZ8weRqy6t8LKBcHeNMC0mlFYvdFb5IiTaWb5xPtmdKSF_pW2yQFLr2kkylyvTQznmr39wE2DKDgT61sHBz27aH_z-Qvj6on4J6rUjc1m_28KlFgxNSdwDX3JR8_eDvt5d9pCdC-Av4SLEGqO2qEccAJQ4uMi1xFi1s-qi3iVhhQRQg3JfpuwmvvKA1AbsfsB7tzW98ppeht9nMPuqr_4-QXvRg';\n    this.id = '111673887524148808582';\n    this.userName = 'Shira Yoked';\n    this.userImage = 'https://lh4.googleusercontent.com/-je_BZAiidDQ/AAAAAAAAAAI/AAAAAAAAAAA/AAKWJJMg180T5GaejdfaOGZhgBI-DKdhmw/s96-c/photo.jpg';\n    this.userEmail = 'shira.yoked@gmail.com';\n  }\n    /*form: FormGroup;\n    loading = false;\n    submitted = false;\n    returnUrl: string;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        // get return url from route parameters or default to '/'\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.login(this.f.username.value, this.f.password.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.router.navigate([this.returnUrl]);\n                },\n                error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                });\n    }*/\n}\n","<!-- <div class=\"card\">\n    <h4 class=\"card-header\">Login</h4>\n    <div class=\"card-body\">\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n                <label for=\"username\">Username</label>\n                <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n                <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.username.errors.required\">Username is required</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                    Login\n                </button>\n                <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\n            </div>\n        </form>\n    </div>\n</div> -->\n<mat-icon svgIcon=\"google\" class=\"vh-icon\"></mat-icon>\n<a class=\"vh-login-google\" #loginRef>\n  <span>Sign In with Google</span>\n</a>\n<button (click)=\"fakeSignIn()\">fake sign in</button>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '../_services';\n\n@Component({ templateUrl: 'register.component.html' })\nexport class RegisterComponent implements OnInit {\n  //TODO: remove this component if cannot register\n    form: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            username: ['', Validators.required],\n            password: ['', [Validators.required, Validators.minLength(6)]]\n        });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        // this.accountService.register(this.form.value)\n        //     .pipe(first())\n        //     .subscribe(\n        //         data => {\n        //             this.alertService.success('Registration successful', { keepAfterRouteChange: true });\n        //             this.router.navigate(['../login'], { relativeTo: this.route });\n        //         },\n        //         error => {\n        //             this.alertService.error(error);\n        //             this.loading = false;\n        //         });\n    }\n}\n","<!-- <div class=\"card\">\n    <h4 class=\"card-header\">Register</h4>\n    <div class=\"card-body\">\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n                <label for=\"firstName\">First Name</label>\n                <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\n                <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"lastName\">Last Name</label>\n                <input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\n                <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"username\">Username</label>\n                <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n                <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.username.errors.required\">Username is required</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                    <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                    Register\n                </button>\n                <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\n            </div>\n        </form>\n    </div>\n</div> -->\nBye Bye!\n<div>\n  <a href=\"/\">Login Again</a>\n</div>\n"]}